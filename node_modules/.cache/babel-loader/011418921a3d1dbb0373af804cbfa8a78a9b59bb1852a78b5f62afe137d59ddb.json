{"ast":null,"code":"import _toConsumableArray from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _objectWithoutProperties from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _slicedToArray from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"url\"],\n  _excluded2 = [\"headers\", \"fetch\", \"method\", \"requestMiddleware\", \"responseMiddleware\"],\n  _excluded3 = [\"headers\", \"fetch\", \"method\", \"requestMiddleware\", \"responseMiddleware\"],\n  _excluded4 = [\"headers\"],\n  _excluded5 = [\"errors\"];\nimport { defaultJsonSerializer } from './defaultJsonSerializer.js';\nimport { HeadersInstanceToPlainObject, uppercase } from './helpers.js';\nimport { parseBatchRequestArgs, parseRawRequestArgs, parseRawRequestExtendedArgs, parseRequestArgs, parseRequestExtendedArgs } from './parseArgs.js';\nimport { resolveRequestDocument } from './resolveRequestDocument.js';\nimport { ClientError } from './types.js';\nimport crossFetch, * as CrossFetch from 'cross-fetch';\n/**\n * Convert the given headers configuration into a plain object.\n */\nvar resolveHeaders = function resolveHeaders(headers) {\n  var oHeaders = {};\n  if (headers) {\n    if (typeof Headers !== \"undefined\" && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          value = _ref2[1];\n        if (name && value !== undefined) {\n          oHeaders[name] = value;\n        }\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n  return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nvar cleanQuery = function cleanQuery(str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, \" \").trim();\n};\n/**\n * Create query string for GraphQL request\n */\nvar buildRequestConfig = function buildRequestConfig(params) {\n  if (!Array.isArray(params.query)) {\n    var _params_ = params;\n    var search = [\"query=\".concat(encodeURIComponent(cleanQuery(_params_.query)))];\n    if (params.variables) {\n      search.push(\"variables=\".concat(encodeURIComponent(_params_.jsonSerializer.stringify(_params_.variables))));\n    }\n    if (_params_.operationName) {\n      search.push(\"operationName=\".concat(encodeURIComponent(_params_.operationName)));\n    }\n    return search.join(\"&\");\n  }\n  if (typeof params.variables !== \"undefined\" && !Array.isArray(params.variables)) {\n    throw new Error(\"Cannot create query with given variable type, array expected\");\n  }\n  // Batch support\n  var params_ = params;\n  var payload = params.query.reduce(function (acc, currentQuery, index) {\n    acc.push({\n      query: cleanQuery(currentQuery),\n      variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined\n    });\n    return acc;\n  }, []);\n  return \"query=\".concat(encodeURIComponent(params_.jsonSerializer.stringify(payload)));\n};\nvar createHttpMethodFetcher = function createHttpMethodFetcher(method) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n      var url, query, variables, operationName, fetch, fetchOptions, middleware, headers, queryParams, body, _fetchOptions$jsonSer, init, urlResolved, initResolved, result, urlNew, initNew;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            url = params.url, query = params.query, variables = params.variables, operationName = params.operationName, fetch = params.fetch, fetchOptions = params.fetchOptions, middleware = params.middleware;\n            headers = _objectSpread({}, params.headers);\n            queryParams = \"\";\n            body = undefined;\n            if (method === \"POST\") {\n              body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n              if (typeof body === \"string\") {\n                // @ts-expect-error todo\n                headers[\"Content-Type\"] = \"application/json\";\n              }\n            } else {\n              // @ts-expect-error todo needs ADT for TS to understand the different states\n              queryParams = buildRequestConfig({\n                query: query,\n                variables: variables,\n                operationName: operationName,\n                jsonSerializer: (_fetchOptions$jsonSer = fetchOptions.jsonSerializer) !== null && _fetchOptions$jsonSer !== void 0 ? _fetchOptions$jsonSer : defaultJsonSerializer\n              });\n            }\n            init = _objectSpread({\n              method: method,\n              headers: headers,\n              body: body\n            }, fetchOptions);\n            urlResolved = url;\n            initResolved = init;\n            if (!middleware) {\n              _context.next = 15;\n              break;\n            }\n            _context.next = 11;\n            return Promise.resolve(middleware(_objectSpread(_objectSpread({}, init), {}, {\n              url: url,\n              operationName: operationName,\n              variables: variables\n            })));\n          case 11:\n            result = _context.sent;\n            urlNew = result.url, initNew = _objectWithoutProperties(result, _excluded);\n            urlResolved = urlNew;\n            initResolved = initNew;\n          case 15:\n            if (queryParams) {\n              urlResolved = \"\".concat(urlResolved, \"?\").concat(queryParams);\n            }\n            _context.next = 18;\n            return fetch(urlResolved, initResolved);\n          case 18:\n            return _context.abrupt(\"return\", _context.sent);\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\n/**\n * GraphQL Client.\n */\nvar GraphQLClient = /*#__PURE__*/function () {\n  function GraphQLClient(url) {\n    var _this = this;\n    var requestConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, GraphQLClient);\n    this.url = url;\n    this.requestConfig = requestConfig;\n    /**\n     * Send a GraphQL query to the server.\n     */\n    this.rawRequest = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var _len,\n        args,\n        _key,\n        queryOrOptions,\n        variables,\n        requestHeaders,\n        rawRequestOptions,\n        _this$requestConfig,\n        headers,\n        _this$requestConfig$f,\n        fetch,\n        _this$requestConfig$m,\n        method,\n        requestMiddleware,\n        responseMiddleware,\n        fetchOptions,\n        url,\n        _resolveRequestDocume,\n        operationName,\n        _args2 = arguments;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            for (_len = _args2.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = _args2[_key];\n            }\n            queryOrOptions = args[0], variables = args[1], requestHeaders = args[2];\n            rawRequestOptions = parseRawRequestArgs(queryOrOptions, variables, requestHeaders);\n            _this$requestConfig = _this.requestConfig, headers = _this$requestConfig.headers, _this$requestConfig$f = _this$requestConfig.fetch, fetch = _this$requestConfig$f === void 0 ? crossFetch : _this$requestConfig$f, _this$requestConfig$m = _this$requestConfig.method, method = _this$requestConfig$m === void 0 ? \"POST\" : _this$requestConfig$m, requestMiddleware = _this$requestConfig.requestMiddleware, responseMiddleware = _this$requestConfig.responseMiddleware, fetchOptions = _objectWithoutProperties(_this$requestConfig, _excluded2);\n            url = _this.url;\n            if (rawRequestOptions.signal !== undefined) {\n              fetchOptions.signal = rawRequestOptions.signal;\n            }\n            _resolveRequestDocume = resolveRequestDocument(rawRequestOptions.query), operationName = _resolveRequestDocume.operationName;\n            return _context2.abrupt(\"return\", makeRequest({\n              url: url,\n              query: rawRequestOptions.query,\n              variables: rawRequestOptions.variables,\n              headers: _objectSpread(_objectSpread({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),\n              operationName: operationName,\n              fetch: fetch,\n              method: method,\n              fetchOptions: fetchOptions,\n              middleware: requestMiddleware\n            }).then(function (response) {\n              if (responseMiddleware) {\n                responseMiddleware(response);\n              }\n              return response;\n            }).catch(function (error) {\n              if (responseMiddleware) {\n                responseMiddleware(error);\n              }\n              throw error;\n            }));\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n  }\n  _createClass(GraphQLClient, [{\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(documentOrOptions) {\n        var _len2,\n          variablesAndRequestHeaders,\n          _key2,\n          variables,\n          requestHeaders,\n          requestOptions,\n          _this$requestConfig2,\n          headers,\n          _this$requestConfig2$,\n          fetch,\n          _this$requestConfig2$2,\n          method,\n          requestMiddleware,\n          responseMiddleware,\n          fetchOptions,\n          url,\n          _resolveRequestDocume2,\n          query,\n          operationName,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              for (_len2 = _args3.length, variablesAndRequestHeaders = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                variablesAndRequestHeaders[_key2 - 1] = _args3[_key2];\n              }\n              variables = variablesAndRequestHeaders[0], requestHeaders = variablesAndRequestHeaders[1];\n              requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders);\n              _this$requestConfig2 = this.requestConfig, headers = _this$requestConfig2.headers, _this$requestConfig2$ = _this$requestConfig2.fetch, fetch = _this$requestConfig2$ === void 0 ? crossFetch : _this$requestConfig2$, _this$requestConfig2$2 = _this$requestConfig2.method, method = _this$requestConfig2$2 === void 0 ? \"POST\" : _this$requestConfig2$2, requestMiddleware = _this$requestConfig2.requestMiddleware, responseMiddleware = _this$requestConfig2.responseMiddleware, fetchOptions = _objectWithoutProperties(_this$requestConfig2, _excluded3);\n              url = this.url;\n              if (requestOptions.signal !== undefined) {\n                fetchOptions.signal = requestOptions.signal;\n              }\n              _resolveRequestDocume2 = resolveRequestDocument(requestOptions.document), query = _resolveRequestDocume2.query, operationName = _resolveRequestDocume2.operationName;\n              return _context3.abrupt(\"return\", makeRequest({\n                url: url,\n                query: query,\n                variables: requestOptions.variables,\n                headers: _objectSpread(_objectSpread({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),\n                operationName: operationName,\n                fetch: fetch,\n                method: method,\n                fetchOptions: fetchOptions,\n                middleware: requestMiddleware\n              }).then(function (response) {\n                if (responseMiddleware) {\n                  responseMiddleware(response);\n                }\n                return response.data;\n              }).catch(function (error) {\n                if (responseMiddleware) {\n                  responseMiddleware(error);\n                }\n                throw error;\n              }));\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function request(_x2) {\n        return _request.apply(this, arguments);\n      }\n      return request;\n    }() // prettier-ignore\n  }, {\n    key: \"batchRequests\",\n    value: function batchRequests(documentsOrOptions, requestHeaders) {\n      var _this$requestConfig$f2,\n        _this2 = this;\n      var batchRequestOptions = parseBatchRequestArgs(documentsOrOptions, requestHeaders);\n      var _this$requestConfig3 = this.requestConfig,\n        headers = _this$requestConfig3.headers,\n        fetchOptions = _objectWithoutProperties(_this$requestConfig3, _excluded4);\n      if (batchRequestOptions.signal !== undefined) {\n        fetchOptions.signal = batchRequestOptions.signal;\n      }\n      var queries = batchRequestOptions.documents.map(function (_ref5) {\n        var document = _ref5.document;\n        return resolveRequestDocument(document).query;\n      });\n      var variables = batchRequestOptions.documents.map(function (_ref6) {\n        var variables = _ref6.variables;\n        return variables;\n      });\n      return makeRequest({\n        url: this.url,\n        query: queries,\n        // @ts-expect-error TODO reconcile batch variables into system.\n        variables: variables,\n        headers: _objectSpread(_objectSpread({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),\n        operationName: undefined,\n        fetch: (_this$requestConfig$f2 = this.requestConfig.fetch) !== null && _this$requestConfig$f2 !== void 0 ? _this$requestConfig$f2 : crossFetch,\n        method: this.requestConfig.method || \"POST\",\n        fetchOptions: fetchOptions,\n        middleware: this.requestConfig.requestMiddleware\n      }).then(function (response) {\n        if (_this2.requestConfig.responseMiddleware) {\n          _this2.requestConfig.responseMiddleware(response);\n        }\n        return response.data;\n      }).catch(function (error) {\n        if (_this2.requestConfig.responseMiddleware) {\n          _this2.requestConfig.responseMiddleware(error);\n        }\n        throw error;\n      });\n    }\n  }, {\n    key: \"setHeaders\",\n    value: function setHeaders(headers) {\n      this.requestConfig.headers = headers;\n      return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      var headers = this.requestConfig.headers;\n      if (headers) {\n        // todo what if headers is in nested array form... ?\n        //@ts-expect-error todo\n        headers[key] = value;\n      } else {\n        this.requestConfig.headers = _defineProperty({}, key, value);\n      }\n      return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */\n  }, {\n    key: \"setEndpoint\",\n    value: function setEndpoint(value) {\n      this.url = value;\n      return this;\n    }\n  }]);\n  return GraphQLClient;\n}();\nvar makeRequest = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(params) {\n    var _params$method, _fetchOptions$jsonSer2;\n    var query, variables, fetchOptions, fetcher, isBatchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, _ref9, _, rest, data, dataEnvelope, errorResult;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          query = params.query, variables = params.variables, fetchOptions = params.fetchOptions;\n          fetcher = createHttpMethodFetcher(uppercase((_params$method = params.method) !== null && _params$method !== void 0 ? _params$method : \"post\"));\n          isBatchingQuery = Array.isArray(params.query);\n          _context4.next = 5;\n          return fetcher(params);\n        case 5:\n          response = _context4.sent;\n          _context4.next = 8;\n          return getResult(response, (_fetchOptions$jsonSer2 = fetchOptions.jsonSerializer) !== null && _fetchOptions$jsonSer2 !== void 0 ? _fetchOptions$jsonSer2 : defaultJsonSerializer);\n        case 8:\n          result = _context4.sent;\n          successfullyReceivedData = Array.isArray(result) ? !result.some(function (_ref8) {\n            var data = _ref8.data;\n            return !data;\n          }) : Boolean(result.data);\n          successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === \"all\" || fetchOptions.errorPolicy === \"ignore\";\n          if (!(response.ok && successfullyPassedErrorPolicy && successfullyReceivedData)) {\n            _context4.next = 18;\n            break;\n          }\n          // @ts-expect-error TODO fixme\n          _ref9 = Array.isArray(result) ? result : result, _ = _ref9.errors, rest = _objectWithoutProperties(_ref9, _excluded5);\n          data = fetchOptions.errorPolicy === \"ignore\" ? rest : result;\n          dataEnvelope = isBatchingQuery ? {\n            data: data\n          } : data; // @ts-expect-error TODO\n          return _context4.abrupt(\"return\", _objectSpread(_objectSpread({}, dataEnvelope), {}, {\n            headers: response.headers,\n            status: response.status\n          }));\n        case 18:\n          errorResult = typeof result === \"string\" ? {\n            error: result\n          } : result;\n          throw new ClientError( // @ts-expect-error TODO\n          _objectSpread(_objectSpread({}, errorResult), {}, {\n            status: response.status,\n            headers: response.headers\n          }), {\n            query: query,\n            variables: variables\n          });\n        case 20:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function makeRequest(_x3) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nvar rawRequest = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    var _len3,\n      args,\n      _key3,\n      urlOrOptions,\n      query,\n      variablesAndRequestHeaders,\n      requestOptions,\n      client,\n      _args5 = arguments;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          for (_len3 = _args5.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n            args[_key3] = _args5[_key3];\n          }\n          urlOrOptions = args[0], query = args[1], variablesAndRequestHeaders = args.slice(2);\n          requestOptions = parseRawRequestExtendedArgs.apply(void 0, [urlOrOptions, query].concat(_toConsumableArray(variablesAndRequestHeaders)));\n          client = new GraphQLClient(requestOptions.url);\n          return _context5.abrupt(\"return\", client.rawRequest(_objectSpread({}, requestOptions)));\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function rawRequest() {\n    return _ref10.apply(this, arguments);\n  };\n}();\n// prettier-ignore\n// eslint-disable-next-line\nfunction request(_x4, _x5) {\n  return _request2.apply(this, arguments);\n}\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nfunction _request2() {\n  _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(urlOrOptions, document) {\n    var _len4,\n      variablesAndRequestHeaders,\n      _key4,\n      requestOptions,\n      client,\n      _args8 = arguments;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          for (_len4 = _args8.length, variablesAndRequestHeaders = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n            variablesAndRequestHeaders[_key4 - 2] = _args8[_key4];\n          }\n          requestOptions = parseRequestExtendedArgs.apply(void 0, [urlOrOptions, document].concat(variablesAndRequestHeaders));\n          client = new GraphQLClient(requestOptions.url);\n          return _context8.abrupt(\"return\", client.request(_objectSpread({}, requestOptions)));\n        case 4:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return _request2.apply(this, arguments);\n}\nvar batchRequests = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _len5,\n      args,\n      _key5,\n      params,\n      client,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          for (_len5 = _args6.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = _args6[_key5];\n          }\n          params = parseBatchRequestsArgsExtended(args);\n          client = new GraphQLClient(params.url);\n          return _context6.abrupt(\"return\", client.batchRequests(params));\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function batchRequests() {\n    return _ref11.apply(this, arguments);\n  };\n}();\nvar parseBatchRequestsArgsExtended = function parseBatchRequestsArgsExtended(args) {\n  if (args.length === 1) {\n    return args[0];\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined\n    };\n  }\n};\nvar createRequestBody = function createRequestBody(query, variables, operationName, jsonSerializer) {\n  var jsonSerializer_ = jsonSerializer !== null && jsonSerializer !== void 0 ? jsonSerializer : defaultJsonSerializer;\n  if (!Array.isArray(query)) {\n    return jsonSerializer_.stringify({\n      query: query,\n      variables: variables,\n      operationName: operationName\n    });\n  }\n  if (typeof variables !== \"undefined\" && !Array.isArray(variables)) {\n    throw new Error(\"Cannot create request body with given variable type, array expected\");\n  }\n  // Batch support\n  var payload = query.reduce(function (acc, currentQuery, index) {\n    acc.push({\n      query: currentQuery,\n      variables: variables ? variables[index] : undefined\n    });\n    return acc;\n  }, []);\n  return jsonSerializer_.stringify(payload);\n};\nvar getResult = /*#__PURE__*/function () {\n  var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(response, jsonSerializer) {\n    var contentType;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          response.headers.forEach(function (value, key) {\n            if (key.toLowerCase() === \"content-type\") {\n              contentType = value;\n            }\n          });\n          if (!(contentType && (contentType.toLowerCase().startsWith(\"application/json\") || contentType.toLowerCase().startsWith(\"application/graphql+json\") || contentType.toLowerCase().startsWith(\"application/graphql-response+json\")))) {\n            _context7.next = 9;\n            break;\n          }\n          _context7.t0 = jsonSerializer;\n          _context7.next = 5;\n          return response.text();\n        case 5:\n          _context7.t1 = _context7.sent;\n          return _context7.abrupt(\"return\", _context7.t0.parse.call(_context7.t0, _context7.t1));\n        case 9:\n          return _context7.abrupt(\"return\", response.text());\n        case 10:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return function getResult(_x6, _x7) {\n    return _ref12.apply(this, arguments);\n  };\n}();\nvar callOrIdentity = function callOrIdentity(value) {\n  return typeof value === \"function\" ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport var gql = function gql(chunks) {\n  for (var _len6 = arguments.length, variables = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    variables[_key6 - 1] = arguments[_key6];\n  }\n  return chunks.reduce(function (acc, chunk, index) {\n    return \"\".concat(acc).concat(chunk).concat(index in variables ? String(variables[index]) : \"\");\n  }, \"\");\n};\nexport { GraphQLWebSocketClient } from './graphql-ws.js';\nexport { resolveRequestDocument } from './resolveRequestDocument.js';\nexport { batchRequests, ClientError, GraphQLClient, rawRequest, request };\nexport default request;","map":{"version":3,"names":["defaultJsonSerializer","HeadersInstanceToPlainObject","uppercase","parseBatchRequestArgs","parseRawRequestArgs","parseRawRequestExtendedArgs","parseRequestArgs","parseRequestExtendedArgs","resolveRequestDocument","ClientError","crossFetch","CrossFetch","resolveHeaders","headers","oHeaders","Headers","Array","isArray","forEach","_ref","_ref2","_slicedToArray","name","value","undefined","cleanQuery","str","replace","trim","buildRequestConfig","params","query","params_","search","concat","encodeURIComponent","variables","push","jsonSerializer","stringify","operationName","join","Error","payload","reduce","acc","currentQuery","index","createHttpMethodFetcher","method","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","fetch","fetchOptions","middleware","queryParams","body","_fetchOptions$jsonSer","init","urlResolved","initResolved","result","urlNew","initNew","wrap","_callee$","_context","prev","next","_objectSpread","createRequestBody","Promise","resolve","sent","_objectWithoutProperties","_excluded","abrupt","stop","_x","apply","arguments","GraphQLClient","_this","requestConfig","length","_classCallCheck","rawRequest","_callee2","_len","args","_key","queryOrOptions","requestHeaders","rawRequestOptions","_this$requestConfig","_this$requestConfig$f","_this$requestConfig$m","requestMiddleware","responseMiddleware","_resolveRequestDocume","_args2","_callee2$","_context2","_excluded2","signal","makeRequest","callOrIdentity","then","response","catch","error","_createClass","key","_request","_callee3","documentOrOptions","_len2","variablesAndRequestHeaders","_key2","requestOptions","_this$requestConfig2","_this$requestConfig2$","_this$requestConfig2$2","_resolveRequestDocume2","_args3","_callee3$","_context3","_excluded3","document","data","request","_x2","batchRequests","documentsOrOptions","_this$requestConfig$f2","_this2","batchRequestOptions","_this$requestConfig3","_excluded4","queries","documents","map","_ref5","_ref6","setHeaders","setHeader","_defineProperty","setEndpoint","_ref7","_callee4","_params$method","_fetchOptions$jsonSer2","fetcher","isBatchingQuery","successfullyReceivedData","successfullyPassedErrorPolicy","_ref9","_","rest","dataEnvelope","errorResult","_callee4$","_context4","getResult","some","_ref8","Boolean","errors","errorPolicy","ok","_excluded5","status","_x3","_ref10","_callee5","_len3","_key3","urlOrOptions","client","_args5","_callee5$","_context5","slice","_toConsumableArray","_x4","_x5","_request2","_callee8","_len4","_key4","_args8","_callee8$","_context8","_ref11","_callee6","_len5","_key5","_args6","_callee6$","_context6","parseBatchRequestsArgsExtended","jsonSerializer_","_ref12","_callee7","contentType","_callee7$","_context7","toLowerCase","startsWith","t0","text","t1","parse","call","_x6","_x7","gql","chunks","_len6","_key6","chunk","String","GraphQLWebSocketClient"],"sources":["/Users/dootss/appdevelopment/blast/node_modules/graphql-request/src/index.ts"],"sourcesContent":["import { defaultJsonSerializer } from './defaultJsonSerializer.js'\nimport { HeadersInstanceToPlainObject, uppercase } from './helpers.js'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs.js'\nimport { resolveRequestDocument } from './resolveRequestDocument.js'\nimport type {\n  BatchRequestDocument,\n  FetchOptions,\n  GraphQLClientRequestHeaders,\n  GraphQLClientResponse,\n  HTTPMethodInput,\n  JsonSerializer,\n  MaybeLazy,\n  RequestConfig,\n  RequestMiddleware,\n  ResponseMiddleware,\n  VariablesAndRequestHeadersArgs,\n} from './types.js'\nimport {\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestOptions,\n  Variables,\n} from './types.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport crossFetch, * as CrossFetch from 'cross-fetch'\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers?: GraphQLClientRequestHeaders): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== `undefined` && headers instanceof Headers) ||\n      (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        if (name && value !== undefined) {\n          oHeaders[name] = value\n        }\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n */\nconst cleanQuery = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim()\n\ntype BuildRequestConfigParamsBatch<V> = {\n  query: string[]\n  variables: V[] | undefined\n  operationName: undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParamsSingle<V> = {\n  query: string\n  variables: V | undefined\n  operationName: string | undefined\n  jsonSerializer: JsonSerializer\n}\n\ntype BuildRequestConfigParams<V> = BuildRequestConfigParamsSingle<V> | BuildRequestConfigParamsBatch<V>\n\n/**\n * Create query string for GraphQL request\n */\nconst buildRequestConfig = <V extends Variables>(params: BuildRequestConfigParams<V>): string => {\n  if (!Array.isArray(params.query)) {\n    const params_ = params as BuildRequestConfigParamsSingle<V>\n    const search: string[] = [`query=${encodeURIComponent(cleanQuery(params_.query))}`]\n\n    if (params.variables) {\n      search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`)\n    }\n\n    if (params_.operationName) {\n      search.push(`operationName=${encodeURIComponent(params_.operationName)}`)\n    }\n\n    return search.join(`&`)\n  }\n\n  if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n    throw new Error(`Cannot create query with given variable type, array expected`)\n  }\n\n  // Batch support\n  const params_ = params as BuildRequestConfigParamsBatch<V>\n  const payload = params.query.reduce<{ query: string; variables: string | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({\n        query: cleanQuery(currentQuery),\n        variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined,\n      })\n      return acc\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`\n}\n\ntype Fetch = (url: string, config: RequestInit) => Promise<Response>\n\ninterface RequestVerbParams<V extends Variables = Variables> {\n  url: string\n  query: string | string[]\n  fetch: Fetch\n  fetchOptions: FetchOptions\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  middleware?: RequestMiddleware<V>\n}\n\nconst createHttpMethodFetcher =\n  (method: 'GET' | 'POST') =>\n  async <V extends Variables>(params: RequestVerbParams<V>) => {\n    const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params\n\n    const headers = { ...params.headers }\n    let queryParams = ``\n    let body = undefined\n\n    if (method === `POST`) {\n      body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n      if (typeof body === `string`) {\n        // @ts-expect-error todo\n        headers[`Content-Type`] = `application/json`\n      }\n    } else {\n      // @ts-expect-error todo needs ADT for TS to understand the different states\n      queryParams = buildRequestConfig<V>({\n        query,\n        variables,\n        operationName,\n        jsonSerializer: fetchOptions.jsonSerializer ?? defaultJsonSerializer,\n      })\n    }\n\n    const init: RequestInit = {\n      method,\n      headers,\n      body,\n      ...fetchOptions,\n    }\n\n    let urlResolved = url\n    let initResolved = init\n    if (middleware) {\n      const result = await Promise.resolve(middleware({ ...init, url, operationName, variables }))\n      const { url: urlNew, ...initNew } = result\n      urlResolved = urlNew\n      initResolved = initNew\n    }\n    if (queryParams) {\n      urlResolved = `${urlResolved}?${queryParams}`\n    }\n    return await fetch(urlResolved, initResolved)\n  }\n\n/**\n * GraphQL Client.\n */\nclass GraphQLClient {\n  constructor(private url: string, public readonly requestConfig: RequestConfig = {}) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  rawRequest: RawRequestMethod = async <T, V extends Variables = Variables>(\n    ...args: RawRequestMethodArgs<V>\n  ): Promise<GraphQLClientResponse<T>> => {\n    const [queryOrOptions, variables, requestHeaders] = args\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables as V,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  async request<T, V extends Variables = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T>\n  async request<T, V extends Variables = Variables>(options: RequestOptions<V, T>): Promise<T>\n  async request<T, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders)\n\n    const {\n      headers,\n      fetch = crossFetch,\n      method = `POST`,\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.requestConfig\n    const { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    return makeRequest<T>({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  // prettier-ignore\n  batchRequests<T extends BatchResult, V extends Variables = Variables>(documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>, requestHeaders?: GraphQLClientRequestHeaders): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n    const { headers, ...fetchOptions } = this.requestConfig\n\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    return makeRequest<T>({\n      url: this.url,\n      query: queries,\n      // @ts-expect-error TODO reconcile batch variables into system.\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch: this.requestConfig.fetch ?? crossFetch,\n      method: this.requestConfig.method || `POST`,\n      fetchOptions,\n      middleware: this.requestConfig.requestMiddleware,\n    })\n      .then((response) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (this.requestConfig.responseMiddleware) {\n          this.requestConfig.responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  setHeaders(headers: GraphQLClientRequestHeaders): GraphQLClient {\n    this.requestConfig.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.requestConfig\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-expect-error todo\n      headers[key] = value\n    } else {\n      this.requestConfig.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nconst makeRequest = async <T = unknown, V extends Variables = Variables>(params: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: GraphQLClientRequestHeaders\n  operationName?: string\n  fetch: Fetch\n  method?: HTTPMethodInput\n  fetchOptions: FetchOptions\n  middleware?: RequestMiddleware<V>\n}): Promise<GraphQLClientResponse<T>> => {\n  const { query, variables, fetchOptions } = params\n  const fetcher = createHttpMethodFetcher(uppercase(params.method ?? `post`))\n  const isBatchingQuery = Array.isArray(params.query)\n  const response = await fetcher(params)\n  const result = await getResult(response, fetchOptions.jsonSerializer ?? defaultJsonSerializer)\n\n  const successfullyReceivedData = Array.isArray(result)\n    ? !result.some(({ data }) => !data)\n    : Boolean(result.data)\n\n  const successfullyPassedErrorPolicy =\n    Array.isArray(result) ||\n    !result.errors ||\n    (Array.isArray(result.errors) && !result.errors.length) ||\n    fetchOptions.errorPolicy === `all` ||\n    fetchOptions.errorPolicy === `ignore`\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    // @ts-expect-error TODO fixme\n    const { errors: _, ...rest } = Array.isArray(result) ? result : result\n    const data = fetchOptions.errorPolicy === `ignore` ? rest : result\n    const dataEnvelope = isBatchingQuery ? { data } : data\n\n    // @ts-expect-error TODO\n    return {\n      ...dataEnvelope,\n      headers: response.headers,\n      status: response.status,\n    }\n  } else {\n    const errorResult =\n      typeof result === `string`\n        ? {\n            error: result,\n          }\n        : result\n    throw new ClientError(\n      // @ts-expect-error TODO\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n// prettier-ignore\ninterface RawRequestMethod {\n  <T, V extends Variables = Variables>(query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestMethodArgs<V extends Variables> =\n  | [query: string, variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  | [RawRequestOptions<V>]\n\n// prettier-ignore\ninterface RawRequest {\n  <T, V extends Variables = Variables>(url: string, query: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<GraphQLClientResponse<T>>\n  <T, V extends Variables = Variables>(options: RawRequestExtendedOptions<V>): Promise<GraphQLClientResponse<T>>\n}\n\n// prettier-ignore\ntype RawRequestArgs<V extends Variables> = \n  | [options: RawRequestExtendedOptions<V>, query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n  | [url: string,                           query?: string, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>]\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nconst rawRequest: RawRequest = async <T, V extends Variables>(\n  ...args: RawRequestArgs<V>\n): Promise<GraphQLClientResponse<T>> => {\n  const [urlOrOptions, query, ...variablesAndRequestHeaders] = args\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\n// REMARKS: In order to have autocomplete for options work make it the first overload. If not\n// then autocomplete will instead show the various methods for a string, which is not what we want.\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(options: RequestExtendedOptions<V, T>): Promise<T>\n// prettier-ignore\nasync function request<T, V extends Variables = Variables>(url: string, document: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T>\n// prettier-ignore\n// eslint-disable-next-line\nasync function request<T, V extends Variables = Variables>(urlOrOptions: string | RequestExtendedOptions<V, T>, document?: RequestDocument | TypedDocumentNode<T, V>, ...variablesAndRequestHeaders: VariablesAndRequestHeadersArgs<V>): Promise<T> {\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nconst batchRequests: BatchRequests = async (...args: BatchRequestsArgs) => {\n  const params = parseBatchRequestsArgsExtended(args)\n  const client = new GraphQLClient(params.url)\n  return client.batchRequests(params)\n}\n\ninterface Result<Data extends object = object> {\n  data: Data\n}\n\ntype BatchResult = [Result, ...Result[]]\n\n// prettier-ignore\ninterface BatchRequests {\n  <T extends BatchResult, V extends Variables = Variables>(url: string, documents: BatchRequestDocument<V>[], requestHeaders?: GraphQLClientRequestHeaders): Promise<T>\n  <T extends BatchResult, V extends Variables = Variables>(options: BatchRequestsExtendedOptions<V>): Promise<T>\n}\n\ntype BatchRequestsArgs =\n  | [url: string, documents: BatchRequestDocument[], requestHeaders?: GraphQLClientRequestHeaders]\n  | [options: BatchRequestsExtendedOptions]\n\nconst parseBatchRequestsArgsExtended = (args: BatchRequestsArgs): BatchRequestsExtendedOptions => {\n  if (args.length === 1) {\n    return args[0]\n  } else {\n    return {\n      url: args[0],\n      documents: args[1],\n      requestHeaders: args[2],\n      signal: undefined,\n    }\n  }\n}\n\nconst createRequestBody = (\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer?: JsonSerializer\n): string => {\n  const jsonSerializer_ = jsonSerializer ?? defaultJsonSerializer\n  if (!Array.isArray(query)) {\n    return jsonSerializer_.stringify({ query, variables, operationName })\n  }\n\n  if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n    throw new Error(`Cannot create request body with given variable type, array expected`)\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n    (acc, currentQuery, index) => {\n      acc.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n      return acc\n    },\n    []\n  )\n\n  return jsonSerializer_.stringify(payload)\n}\n\nconst getResult = async (\n  response: Response,\n  jsonSerializer: JsonSerializer\n): Promise<\n  | { data: object; errors: undefined }[]\n  | { data: object; errors: undefined }\n  | { data: undefined; errors: object }\n  | { data: undefined; errors: object[] }\n> => {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === `content-type`) {\n      contentType = value\n    }\n  })\n\n  if (\n    contentType &&\n    (contentType.toLowerCase().startsWith(`application/json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql+json`) ||\n      contentType.toLowerCase().startsWith(`application/graphql-response+json`))\n  ) {\n    return jsonSerializer.parse(await response.text()) as any\n  } else {\n    return response.text() as any\n  }\n}\n\nconst callOrIdentity = <T>(value: MaybeLazy<T>) => {\n  return typeof value === `function` ? (value as () => T)() : value\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport const gql = (chunks: TemplateStringsArray, ...variables: unknown[]): string => {\n  return chunks.reduce(\n    (acc, chunk, index) => `${acc}${chunk}${index in variables ? String(variables[index]) : ``}`,\n    ``\n  )\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws.js'\nexport { resolveRequestDocument } from './resolveRequestDocument.js'\nexport {\n  BatchRequestDocument,\n  batchRequests,\n  BatchRequestsExtendedOptions,\n  BatchRequestsOptions,\n  ClientError,\n  GraphQLClient,\n  rawRequest,\n  RawRequestExtendedOptions,\n  RawRequestOptions,\n  request,\n  RequestDocument,\n  RequestExtendedOptions,\n  RequestMiddleware,\n  RequestOptions,\n  ResponseMiddleware,\n  Variables,\n}\nexport default request\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}