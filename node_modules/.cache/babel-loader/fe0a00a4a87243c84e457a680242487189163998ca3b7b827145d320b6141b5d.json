{"ast":null,"code":"var _jsxFileName = \"/Users/dootss/appdevelopment/blast/src/pages/reviews/Category.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Album from '../../components/Release';\nimport tunnel from '../../res/tunnel.mp4';\nimport './category.css';\nimport { graphcms, CATEGORY_POSTS_ALL, options } from '../../graphql/Queries';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport useQueryPosts from '../../hooks/useQueryPosts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Category = () => {\n  _s();\n  const data = useQueryPosts({\n    query: CATEGORY_POSTS_AL\n  });\n  const {\n    slug\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  const location = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n  useEffect(() => {\n    graphcms.request(CATEGORY_POSTS_ALL, {\n      slug\n    }).then(res => setPosts(res.posts));\n  }, [slug]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: \"album-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"video\", {\n        autoPlay: true,\n        loop: true,\n        muted: true,\n        className: \"album-video\",\n        children: /*#__PURE__*/_jsxDEV(\"source\", {\n          src: tunnel,\n          type: \"video/mp4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"album-video-overlay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"album-header-title\",\n        children: [slug.toUpperCase().slice(0, -1), \" REVIEWS\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"albums-grid\",\n      children: posts === null || posts === void 0 ? void 0 : posts.map(post => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/${slug}/${post.slug}`,\n        children: /*#__PURE__*/_jsxDEV(Album, {\n          img: post.coverPhoto.url,\n          name: post.title,\n          artist: post.artist,\n          date: new Date(post.datePublished).toLocaleDateString('en-US', options)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(Category, \"6jr0Cz1GKHbymLEhIUyy4Lr6dVM=\", false, function () {\n  return [useQueryPosts, useParams, useLocation];\n});\n_c = Category;\nexport default Category;\nvar _c;\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"names":["React","useState","useEffect","Album","tunnel","graphcms","CATEGORY_POSTS_ALL","options","Link","useParams","useLocation","useQueryPosts","jsxDEV","_jsxDEV","Category","_s","data","query","CATEGORY_POSTS_AL","slug","posts","setPosts","location","window","scrollTo","request","then","res","className","children","autoPlay","loop","muted","src","type","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","slice","map","post","to","img","coverPhoto","url","name","title","artist","date","Date","datePublished","toLocaleDateString","id","_c","$RefreshReg$"],"sources":["/Users/dootss/appdevelopment/blast/src/pages/reviews/Category.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Album from '../../components/Release';\nimport tunnel from '../../res/tunnel.mp4';\nimport './category.css';\nimport { graphcms, CATEGORY_POSTS_ALL, options } from '../../graphql/Queries';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport useQueryPosts from '../../hooks/useQueryPosts';\n\nconst Category = () => {\n  const data = useQueryPosts({query: CATEGORY_POSTS_AL})\n  const { slug } = useParams();\n  const [posts, setPosts] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n\n  useEffect(() => {\n    graphcms.request(CATEGORY_POSTS_ALL, { slug })\n    .then(res => setPosts(res.posts))\n  }, [slug]);\n\n  return (\n    <main className='album-container'>\n      <header>\n        <video autoPlay loop muted className='album-video'>\n          <source src={tunnel} type='video/mp4' />\n        </video>\n        <div className='album-video-overlay'></div> \n        <h1 className='album-header-title'>\n          {slug.toUpperCase().slice(0, -1)} REVIEWS\n        </h1>    \n      </header>\n\n      <div className='albums-grid'>\n        {posts?.map(post => (\n          <Link \n            to={`/${slug}/${post.slug}`}\n           key={post.id}\n          >\n            <Album \n              img={post.coverPhoto.url}\n              name={post.title}\n              artist={post.artist}\n              date={new Date(post.datePublished).toLocaleDateString('en-US', options)}\n            />\n          </Link>\n        ))}\n      </div>\n    </main>\n  )\n}\n\nexport default Category\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}