{"ast":null,"code":"import _slicedToArray from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return \"\".concat(key, \"_\").concat(key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        });\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\nfunction observe(element, callback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements;\n  // Register the callback listener for this element\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inherits(InView, _React$Component);\n  var _super = _createSuper(InView);\n  function InView(props) {\n    var _this;\n    _classCallCheck(this, InView);\n    _this = _super.call(this, props);\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  _createClass(InView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // If a IntersectionObserver option changed, reinit the observer\n      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n        this.unobserve();\n        this.observeNode();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unobserve();\n      this.node = null;\n    }\n  }, {\n    key: \"observeNode\",\n    value: function observeNode() {\n      if (!this.node || this.props.skip) return;\n      var _this$props2 = this.props,\n        threshold = _this$props2.threshold,\n        root = _this$props2.root,\n        rootMargin = _this$props2.rootMargin,\n        trackVisibility = _this$props2.trackVisibility,\n        delay = _this$props2.delay,\n        fallbackInView = _this$props2.fallbackInView;\n      this._unobserveCb = observe(this.node, this.handleChange, {\n        threshold: threshold,\n        root: root,\n        rootMargin: rootMargin,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, {\n    key: \"unobserve\",\n    value: function unobserve() {\n      if (this._unobserveCb) {\n        this._unobserveCb();\n        this._unobserveCb = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!isPlainChildren(this.props)) {\n        var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n        return this.props.children({\n          inView: inView,\n          entry: entry,\n          ref: this.handleNode\n        });\n      }\n      var _this$props = this.props,\n        children = _this$props.children,\n        as = _this$props.as,\n        props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return React.createElement(as || 'div', _extends({\n        ref: this.handleNode\n      }, props), children);\n    }\n  }]);\n  return InView;\n}(React.Component);\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\nfunction useInView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView,\n    onChange = _ref.onChange;\n  var _state$entry;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    ref = _React$useState2[0],\n    setRef = _React$useState2[1];\n  var callback = React.useRef();\n  var _React$useState3 = React.useState({\n      inView: !!initialInView,\n      entry: undefined\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    state = _React$useState4[0],\n    setState = _React$useState4[1];\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n  React.useEffect(function () {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    var unobserve;\n    unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  var previousEntryTarget = React.useRef();\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined\n    });\n  }\n  var result = [setRef, state.inView, state.entry];\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","concat","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","arguments","length","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","indexOf","delete","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","call","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_createClass","value","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props2","render","_this$state","ref","_this$props","as","_objectWithoutPropertiesLoose","_excluded","React","createElement","_extends","Component","useInView","_ref","_state$entry","_React$useState","useState","_React$useState2","_slicedToArray","setRef","useRef","_React$useState3","_React$useState4","current","useEffect","entryTarget","previousEntryTarget","result"],"sources":["/Users/dootss/appdevelopment/blast/node_modules/src/observe.ts","/Users/dootss/appdevelopment/blast/node_modules/src/InView.tsx","/Users/dootss/appdevelopment/blast/node_modules/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}