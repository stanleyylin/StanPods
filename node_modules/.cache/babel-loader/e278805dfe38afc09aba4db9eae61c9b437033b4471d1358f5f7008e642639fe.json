{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import{GraphQLClient,gql}from\"graphql-request\";export var options={year:\"numeric\",month:\"long\",day:\"numeric\"};export var graphcms=new GraphQLClient(process.env.REACT_APP_API);var comment=\"\\n  id,\\n  name,\\n  comment\\n\";var post=\"\\n  id,\\n  title,\\n  slug,\\n  coverPhoto { url },\\n  content { html },\\n  datePublished,\\n  artist,\\n  label,\\n  rating,\\n  year,\\n  genre,\\n  category {\\n    name\\n    slug\\n  }\\n\";// unused\nexport var QUERY_SLUG_CATEGORIES=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n{\\n  categories() {\\n    name,\\n    slug\\n  }\\n}\\n\"])));export var ALBUM_POSTS=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  {\\n    posts(where: {category: {name: \\\"Albums\\\"}}, orderBy: datePublished_DESC, first: 4) {\\n      \",\"\\n    }\\n  }\\n\"])),post);export var TRACK_POSTS=gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  {\\n    posts(where: {category: {name: \\\"Tracks\\\"}}, orderBy: datePublished_DESC, first: 4) {\\n      \",\"\\n    }\\n  }\\n\"])),post);export var CATEGORY_POSTS_ALL=gql(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  query GetPostsByCategory($slug: String!, $limit: Int!, $skip: Int!){\\n    posts(\\n      where: {category: {slug: $slug}}, \\n      orderBy: datePublished_DESC,\\n      first: $limit,\\n      skip: $skip,\\n    ){\\n      \",\"\\n    }\\n\\n    countConnection: postsConnection(\\n      where: {category: {slug: $slug}}\\n      stage: PUBLISHED) \\n    {\\n      aggregate {\\n        count\\n      }\\n    }\\n  }\\n\"])),post);export var QUERY_SEARCH=gql(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  query GetPostsByCategory($slug: String!, $limit: Int!, $skip: Int!) {\\n    posts(\\n      orderBy: updatedAt_DESC,\\n      first: $limit,\\n      skip: $skip,\\n      where: {_search: $slug, AND: {slug_contains: $slug}},\\n    ) {\\n      \",\"\\n    }\\n\\n    countConnection: postsConnection(\\n      where: {_search: $slug, AND: {slug_contains: $slug}},\\n      stage: PUBLISHED),\\n    {\\n      aggregate {\\n        count\\n      }\\n    }\\n  }\\n\"])),post);export var QUERY_ONE_POST=gql(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  query GetOnePost($slug: String!, $limit: Int!, $skip: Int!) {\\n    posts(where: {slug: $slug}) {\\n      \",\"\\n      comments(\\n        orderBy: publishedAt_DESC,\\n        first: $limit,\\n        skip: $skip,\\n        ) {\\n        \",\"\\n      }\\n    }\\n\\n    countConnection: commentsConnection(\\n      stage: PUBLISHED,\\n      where: {post: {slug: $slug}}\\n    ) {\\n      aggregate {\\n        count\\n      }\\n    }\\n  }\\n\"])),post,comment);","map":{"version":3,"names":["GraphQLClient","gql","options","year","month","day","graphcms","process","env","REACT_APP_API","comment","post","QUERY_SLUG_CATEGORIES","_templateObject","_taggedTemplateLiteral","ALBUM_POSTS","_templateObject2","TRACK_POSTS","_templateObject3","CATEGORY_POSTS_ALL","_templateObject4","QUERY_SEARCH","_templateObject5","QUERY_ONE_POST","_templateObject6"],"sources":["/Users/dootss/appdevelopment/blast/src/graphql/Queries.js"],"sourcesContent":["import { GraphQLClient, gql } from \"graphql-request\";\n\nexport const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n\nexport const graphcms = new GraphQLClient(process.env.REACT_APP_API);\n\nconst comment = `\n  id,\n  name,\n  comment\n`;\n\nconst post = `\n  id,\n  title,\n  slug,\n  coverPhoto { url },\n  content { html },\n  datePublished,\n  artist,\n  label,\n  rating,\n  year,\n  genre,\n  category {\n    name\n    slug\n  }\n`;\n\n// unused\nexport const QUERY_SLUG_CATEGORIES = gql`\n{\n  categories() {\n    name,\n    slug\n  }\n}\n`;\n\nexport const ALBUM_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Albums\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\n\nexport const TRACK_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Tracks\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\n\nexport const CATEGORY_POSTS_ALL = gql`\n  query GetPostsByCategory($slug: String!, $limit: Int!, $skip: Int!){\n    posts(\n      where: {category: {slug: $slug}}, \n      orderBy: datePublished_DESC,\n      first: $limit,\n      skip: $skip,\n    ){\n      ${post}\n    }\n\n    countConnection: postsConnection(\n      where: {category: {slug: $slug}}\n      stage: PUBLISHED) \n    {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nexport const QUERY_SEARCH = gql`\n  query GetPostsByCategory($slug: String!, $limit: Int!, $skip: Int!) {\n    posts(\n      orderBy: updatedAt_DESC,\n      first: $limit,\n      skip: $skip,\n      where: {_search: $slug, AND: {slug_contains: $slug}},\n    ) {\n      ${post}\n    }\n\n    countConnection: postsConnection(\n      where: {_search: $slug, AND: {slug_contains: $slug}},\n      stage: PUBLISHED),\n    {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nexport const QUERY_ONE_POST = gql`\n  query GetOnePost($slug: String!, $limit: Int!, $skip: Int!) {\n    posts(where: {slug: $slug}) {\n      ${post}\n      comments(\n        orderBy: publishedAt_DESC,\n        first: $limit,\n        skip: $skip,\n        ) {\n        ${comment}\n      }\n    }\n\n    countConnection: commentsConnection(\n      stage: PUBLISHED,\n      where: {post: {slug: $slug}}\n    ) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n"],"mappings":"iPAAA,OAASA,aAAa,CAAEC,GAAG,KAAQ,iBAAiB,CAEpD,MAAO,IAAM,CAAAC,OAAO,CAAG,CAAEC,IAAI,CAAE,SAAS,CAAEC,KAAK,CAAE,MAAM,CAAEC,GAAG,CAAE,SAAU,CAAC,CAEzE,MAAO,IAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAN,aAAa,CAACO,OAAO,CAACC,GAAG,CAACC,aAAa,CAAC,CAEpE,GAAM,CAAAC,OAAO,gCAIZ,CAED,GAAM,CAAAC,IAAI,uLAgBT,CAED;AACA,MAAO,IAAM,CAAAC,qBAAqB,CAAGX,GAAG,CAAAY,eAAA,GAAAA,eAAA,CAAAC,sBAAA,4DAOvC,CAED,MAAO,IAAM,CAAAC,WAAW,CAAGd,GAAG,CAAAe,gBAAA,GAAAA,gBAAA,CAAAF,sBAAA,iIAGtBH,IAAI,CAGX,CAED,MAAO,IAAM,CAAAM,WAAW,CAAGhB,GAAG,CAAAiB,gBAAA,GAAAA,gBAAA,CAAAJ,sBAAA,iIAGtBH,IAAI,CAGX,CAED,MAAO,IAAM,CAAAQ,kBAAkB,CAAGlB,GAAG,CAAAmB,gBAAA,GAAAA,gBAAA,CAAAN,sBAAA,yZAQ7BH,IAAI,CAYX,CAED,MAAO,IAAM,CAAAU,YAAY,CAAGpB,GAAG,CAAAqB,gBAAA,GAAAA,gBAAA,CAAAR,sBAAA,+bAQvBH,IAAI,CAYX,CAED,MAAO,IAAM,CAAAY,cAAc,CAAGtB,GAAG,CAAAuB,gBAAA,GAAAA,gBAAA,CAAAV,sBAAA,+aAGzBH,IAAI,CAMFD,OAAO,CAahB"},"metadata":{},"sourceType":"module","externalDependencies":[]}