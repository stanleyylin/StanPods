{"ast":null,"code":"import * as React from 'react';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold);\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\nfunction observe(element, callback) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n    const _this$props = this.props,\n      {\n        children,\n        as\n      } = _this$props,\n      props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\nfunction useInView() {\n  let {\n    threshold,\n    delay,\n    trackVisibility,\n    rootMargin,\n    root,\n    triggerOnce,\n    skip,\n    initialInView,\n    fallbackInView,\n    onChange\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _state$entry;\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  });\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  const previousEntryTarget = React.useRef();\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined\n    });\n  }\n  const result = [setRef, state.inView, state.entry];\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","arguments","length","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","delete","size","disconnect","isPlainChildren","props","children","InView","React","Component","constructor","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","_this$props","as","_objectWithoutPropertiesLoose","_excluded","createElement","_extends","useInView","_state$entry","setRef","useState","useRef","current","useEffect","entryTarget","previousEntryTarget","result"],"sources":["/Users/dootss/appdevelopment/blast/node_modules/src/observe.ts","/Users/dootss/appdevelopment/blast/node_modules/src/InView.tsx","/Users/dootss/appdevelopment/blast/node_modules/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}