{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { graphcms } from '../graphql/Queries';\nimport { useMyContext } from '../context/store';\nconst useQueryPosts = _ref => {\n  _s();\n  let {\n    query,\n    limit = 3,\n    main = false\n  } = _ref;\n  const {\n    slug\n  } = useParams();\n  const {\n    search,\n    pathname\n  } = useLocation();\n  const page = Number(new URLSearchParams(search).get('page')) || 1;\n  const skip = (page - 1) * limit;\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const {\n    setLoading,\n    setTotalPage\n  } = useMyContext();\n  useEffect(() => {\n    setTotalPage(1);\n  }, [pathname, setTotalPage]);\n  useEffect(() => {\n    setLoading(true);\n    if (slug || main) {\n      graphcms.request(query, {\n        slug,\n        limit,\n        skip\n      }).then(res => {\n        var _res$countConnection, _res$countConnection$;\n        const count = (res === null || res === void 0 ? void 0 : (_res$countConnection = res.countConnection) === null || _res$countConnection === void 0 ? void 0 : (_res$countConnection$ = _res$countConnection.aggregate) === null || _res$countConnection$ === void 0 ? void 0 : _res$countConnection$.count) || 0;\n        setTotalPage(Math.ceil(count / limit));\n        setPosts(res.posts);\n        setError(null);\n      }).catch(error => {\n        setTotalPage(1);\n        setPosts([]);\n        setError(error.message);\n      }).finally(() => setLoading(false));\n    } else {\n      setPosts([]);\n      setError(null);\n      setLoading(false);\n    }\n  }, [main, setLoading, setTotalPage, query, slug, limit, skip]);\n  return {\n    posts,\n    error\n  };\n};\n_s(useQueryPosts, \"LQYOz8dOZRzbGvQlrCljWJBH/JU=\", false, function () {\n  return [useParams, useLocation, useMyContext];\n});\nexport default useQueryPosts;","map":{"version":3,"names":["useState","useEffect","useParams","useLocation","graphcms","useMyContext","useQueryPosts","_ref","_s","query","limit","main","slug","search","pathname","page","Number","URLSearchParams","get","skip","posts","setPosts","error","setError","setLoading","setTotalPage","request","then","res","_res$countConnection","_res$countConnection$","count","countConnection","aggregate","Math","ceil","catch","message","finally"],"sources":["/Users/dootss/appdevelopment/blast/src/hooks/useQueryPosts.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { graphcms } from '../graphql/Queries';\nimport { useMyContext } from '../context/store';\n\nconst useQueryPosts = ({query, limit = 3, main = false }) => {\n  const { slug } = useParams();\n  const { search, pathname } = useLocation();\n\n  const page = Number(new URLSearchParams(search).get('page')) || 1;\n  const skip = (page - 1) * limit;\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  \n  const { setLoading, setTotalPage } = useMyContext();\n\n  useEffect(() => {\n    setTotalPage(1);\n  }, [pathname, setTotalPage]);\n\n  useEffect(() => {\n    setLoading(true);\n    if(slug || main) {\n      graphcms.request(query, { slug, limit, skip })\n      .then(res => {\n        const count = res?.countConnection?.aggregate?.count || 0;\n        setTotalPage(Math.ceil(count / limit));\n        setPosts(res.posts);\n        setError(null);\n      })\n      .catch(error => {\n        setTotalPage(1);\n        setPosts([]);\n        setError(error.message);\n      })\n      .finally(() => setLoading(false))\n    } else {\n      setPosts([]);\n      setError(null);\n      setLoading(false);\n    }\n  }, [main, setLoading, setTotalPage, query, slug, limit, skip])\n\n  return { posts, error }\n}\n\nexport default useQueryPosts\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,YAAY,QAAQ,kBAAkB;AAE/C,MAAMC,aAAa,GAAGC,IAAA,IAAuC;EAAAC,EAAA;EAAA,IAAtC;IAACC,KAAK;IAAEC,KAAK,GAAG,CAAC;IAAEC,IAAI,GAAG;EAAM,CAAC,GAAAJ,IAAA;EACtD,MAAM;IAAEK;EAAK,CAAC,GAAGV,SAAS,CAAC,CAAC;EAC5B,MAAM;IAAEW,MAAM;IAAEC;EAAS,CAAC,GAAGX,WAAW,CAAC,CAAC;EAE1C,MAAMY,IAAI,GAAGC,MAAM,CAAC,IAAIC,eAAe,CAACJ,MAAM,CAAC,CAACK,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;EACjE,MAAMC,IAAI,GAAG,CAACJ,IAAI,GAAG,CAAC,IAAIL,KAAK;EAC/B,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM;IAAEwB,UAAU;IAAEC;EAAa,CAAC,GAAGpB,YAAY,CAAC,CAAC;EAEnDJ,SAAS,CAAC,MAAM;IACdwB,YAAY,CAAC,CAAC,CAAC;EACjB,CAAC,EAAE,CAACX,QAAQ,EAAEW,YAAY,CAAC,CAAC;EAE5BxB,SAAS,CAAC,MAAM;IACduB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAGZ,IAAI,IAAID,IAAI,EAAE;MACfP,QAAQ,CAACsB,OAAO,CAACjB,KAAK,EAAE;QAAEG,IAAI;QAAEF,KAAK;QAAES;MAAK,CAAC,CAAC,CAC7CQ,IAAI,CAACC,GAAG,IAAI;QAAA,IAAAC,oBAAA,EAAAC,qBAAA;QACX,MAAMC,KAAK,GAAG,CAAAH,GAAG,aAAHA,GAAG,wBAAAC,oBAAA,GAAHD,GAAG,CAAEI,eAAe,cAAAH,oBAAA,wBAAAC,qBAAA,GAApBD,oBAAA,CAAsBI,SAAS,cAAAH,qBAAA,uBAA/BA,qBAAA,CAAiCC,KAAK,KAAI,CAAC;QACzDN,YAAY,CAACS,IAAI,CAACC,IAAI,CAACJ,KAAK,GAAGrB,KAAK,CAAC,CAAC;QACtCW,QAAQ,CAACO,GAAG,CAACR,KAAK,CAAC;QACnBG,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,CACDa,KAAK,CAACd,KAAK,IAAI;QACdG,YAAY,CAAC,CAAC,CAAC;QACfJ,QAAQ,CAAC,EAAE,CAAC;QACZE,QAAQ,CAACD,KAAK,CAACe,OAAO,CAAC;MACzB,CAAC,CAAC,CACDC,OAAO,CAAC,MAAMd,UAAU,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC,MAAM;MACLH,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,IAAI,CAAC;MACdC,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACb,IAAI,EAAEa,UAAU,EAAEC,YAAY,EAAEhB,KAAK,EAAEG,IAAI,EAAEF,KAAK,EAAES,IAAI,CAAC,CAAC;EAE9D,OAAO;IAAEC,KAAK;IAAEE;EAAM,CAAC;AACzB,CAAC;AAAAd,EAAA,CAvCKF,aAAa;EAAA,QACAJ,SAAS,EACGC,WAAW,EAOHE,YAAY;AAAA;AAgCnD,eAAeC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}