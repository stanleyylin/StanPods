{"ast":null,"code":"import { GraphQLClient, gql } from \"graphql-request\";\nexport const options = {\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\"\n};\nexport const graphcms = new GraphQLClient(process.env.REACT_APP_API);\nconst comment = `\n  id,\n  name,\n  comment\n`;\nconst post = `\n  id,\n  title,\n  slug,\n  coverPhoto { url },\n  content { html },\n  datePublished,\n  artist,\n  label,\n  rating,\n  year,\n  genre,\n  category {\n    name\n    slug\n  },\n  comments(orderBy: publishedAt_DESC) {\n    ${comment}\n  }\n`;\n\n// unused\nexport const QUERY_SLUG_CATEGORIES = gql`\n{\n  categories() {\n    name,\n    slug\n  }\n}\n`;\nexport const ALBUM_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Albums\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\nexport const TRACK_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Tracks\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\nexport const CATEGORY_POSTS_ALL = gql`\n  query GetPostsByCategory($slug: String!, $limit: Int!){\n    posts(\n      where: {category: {slug: $slug}}, \n      orderBy: datePublished_DESC\n    ){\n      ${post}\n    }\n\n    countConnection: postsConnection(stage: PUBLISHED) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nexport const QUERY_SEARCH = gql`\n  query GetPostsByCategory($slug: String!) {\n    posts(\n      orderBy: updatedAt_DESC,\n      where: {_search: $slug, AND: {slug_contains: $slug}}\n    ) {\n      ${post}\n    }\n  }\n`;\nexport const QUERY_ONE_POST = gql`\n  query GetOnePost($slug: String!) {\n    posts(where: {slug: $slug}) {\n      ${post}\n    }\n  }\n`;","map":{"version":3,"names":["GraphQLClient","gql","options","year","month","day","graphcms","process","env","REACT_APP_API","comment","post","QUERY_SLUG_CATEGORIES","ALBUM_POSTS","TRACK_POSTS","CATEGORY_POSTS_ALL","QUERY_SEARCH","QUERY_ONE_POST"],"sources":["/Users/dootss/appdevelopment/blast/src/graphql/Queries.js"],"sourcesContent":["import { GraphQLClient, gql } from \"graphql-request\";\n\nexport const options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\n\nexport const graphcms = new GraphQLClient(process.env.REACT_APP_API);\n\nconst comment = `\n  id,\n  name,\n  comment\n`;\n\nconst post = `\n  id,\n  title,\n  slug,\n  coverPhoto { url },\n  content { html },\n  datePublished,\n  artist,\n  label,\n  rating,\n  year,\n  genre,\n  category {\n    name\n    slug\n  },\n  comments(orderBy: publishedAt_DESC) {\n    ${comment}\n  }\n`;\n\n// unused\nexport const QUERY_SLUG_CATEGORIES = gql`\n{\n  categories() {\n    name,\n    slug\n  }\n}\n`;\n\nexport const ALBUM_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Albums\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\n\nexport const TRACK_POSTS = gql`\n  {\n    posts(where: {category: {name: \"Tracks\"}}, orderBy: datePublished_DESC, first: 4) {\n      ${post}\n    }\n  }\n`;\n\nexport const CATEGORY_POSTS_ALL = gql`\n  query GetPostsByCategory($slug: String!, $limit: Int!){\n    posts(\n      where: {category: {slug: $slug}}, \n      orderBy: datePublished_DESC\n    ){\n      ${post}\n    }\n\n    countConnection: postsConnection(stage: PUBLISHED) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nexport const QUERY_SEARCH = gql`\n  query GetPostsByCategory($slug: String!) {\n    posts(\n      orderBy: updatedAt_DESC,\n      where: {_search: $slug, AND: {slug_contains: $slug}}\n    ) {\n      ${post}\n    }\n  }\n`;\n\nexport const QUERY_ONE_POST = gql`\n  query GetOnePost($slug: String!) {\n    posts(where: {slug: $slug}) {\n      ${post}\n    }\n  }\n`;\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,GAAG,QAAQ,iBAAiB;AAEpD,OAAO,MAAMC,OAAO,GAAG;EAAEC,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE,MAAM;EAAEC,GAAG,EAAE;AAAU,CAAC;AAEzE,OAAO,MAAMC,QAAQ,GAAG,IAAIN,aAAa,CAACO,OAAO,CAACC,GAAG,CAACC,aAAa,CAAC;AAEpE,MAAMC,OAAO,GAAI;AACjB;AACA;AACA;AACA,CAAC;AAED,MAAMC,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMD,OAAQ;AACd;AACA,CAAC;;AAED;AACA,OAAO,MAAME,qBAAqB,GAAGX,GAAI;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMY,WAAW,GAAGZ,GAAI;AAC/B;AACA;AACA,QAAQU,IAAK;AACb;AACA;AACA,CAAC;AAED,OAAO,MAAMG,WAAW,GAAGb,GAAI;AAC/B;AACA;AACA,QAAQU,IAAK;AACb;AACA;AACA,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAGd,GAAI;AACtC;AACA;AACA;AACA;AACA;AACA,QAAQU,IAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,OAAO,MAAMK,YAAY,GAAGf,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA,QAAQU,IAAK;AACb;AACA;AACA,CAAC;AAED,OAAO,MAAMM,cAAc,GAAGhB,GAAI;AAClC;AACA;AACA,QAAQU,IAAK;AACb;AACA;AACA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}