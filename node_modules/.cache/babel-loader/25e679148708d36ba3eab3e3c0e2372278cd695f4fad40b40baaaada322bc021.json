{"ast":null,"code":"import { parse, print } from 'graphql';\n/**\n * helpers\n */\nvar extractOperationName = function extractOperationName(document) {\n  var operationName = undefined;\n  var operationDefinitions = document.definitions.filter(function (definition) {\n    return definition.kind === \"OperationDefinition\";\n  });\n  if (operationDefinitions.length === 1) {\n    var _operationDefinitions, _operationDefinitions2;\n    operationName = (_operationDefinitions = operationDefinitions[0]) === null || _operationDefinitions === void 0 ? void 0 : (_operationDefinitions2 = _operationDefinitions.name) === null || _operationDefinitions2 === void 0 ? void 0 : _operationDefinitions2.value;\n  }\n  return operationName;\n};\nexport var resolveRequestDocument = function resolveRequestDocument(document) {\n  if (typeof document === \"string\") {\n    var _operationName = undefined;\n    try {\n      var parsedDocument = parse(document);\n      _operationName = extractOperationName(parsedDocument);\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n    return {\n      query: document,\n      operationName: _operationName\n    };\n  }\n  var operationName = extractOperationName(document);\n  return {\n    query: print(document),\n    operationName: operationName\n  };\n};","map":{"version":3,"names":["parse","print","extractOperationName","document","operationName","undefined","operationDefinitions","definitions","filter","definition","kind","length","_operationDefinitions","_operationDefinitions2","name","value","resolveRequestDocument","parsedDocument","err","query"],"sources":["/Users/dootss/appdevelopment/blast/node_modules/graphql-request/src/resolveRequestDocument.ts"],"sourcesContent":["import type { RequestDocument } from './types.js'\nimport type { DocumentNode, OperationDefinitionNode } from 'graphql'\nimport { parse, print } from 'graphql'\n\n/**\n * helpers\n */\n\nconst extractOperationName = (document: DocumentNode): string | undefined => {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === `OperationDefinition`\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0]?.name?.value\n  }\n\n  return operationName\n}\n\nexport const resolveRequestDocument = (\n  document: RequestDocument\n): { query: string; operationName?: string } => {\n  if (typeof document === `string`) {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n"],"mappings":"AAEA,SAASA,KAAK,EAAEC,KAAK,QAAQ,SAAS;AAEtC;;;AAIA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,QAAsB,EAAwB;EAC1E,IAAIC,aAAa,GAAGC,SAAS;EAE7B,IAAMC,oBAAoB,GAAGH,QAAQ,CAACI,WAAW,CAACC,MAAM,CACtD,UAACC,UAAU;IAAA,OAAKA,UAAU,CAACC,IAAI,0BAA0B;EAAA,EAC7B;EAE9B,IAAIJ,oBAAoB,CAACK,MAAM,KAAK,CAAC,EAAE;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACrCT,aAAa,IAAAQ,qBAAA,GAAGN,oBAAoB,CAAC,CAAC,CAAC,cAAAM,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAAyBE,IAAI,cAAAD,sBAAA,uBAA7BA,sBAAA,CAA+BE,KAAK;;EAGtD,OAAOX,aAAa;AACtB,CAAC;AAED,OAAO,IAAMY,sBAAsB,GAAG,SAAzBA,sBAAsBA,CACjCb,QAAyB,EACoB;EAC7C,IAAI,OAAOA,QAAQ,aAAa,EAAE;IAChC,IAAIC,cAAa,GAAGC,SAAS;IAE7B,IAAI;MACF,IAAMY,cAAc,GAAGjB,KAAK,CAACG,QAAQ,CAAC;MACtCC,cAAa,GAAGF,oBAAoB,CAACe,cAAc,CAAC;KACrD,CAAC,OAAOC,GAAG,EAAE;MACZ;IAAA;IAGF,OAAO;MAAEC,KAAK,EAAEhB,QAAQ;MAAEC,aAAa,EAAbA;IAAa,CAAE;;EAG3C,IAAMA,aAAa,GAAGF,oBAAoB,CAACC,QAAQ,CAAC;EAEpD,OAAO;IAAEgB,KAAK,EAAElB,KAAK,CAACE,QAAQ,CAAC;IAAEC,aAAa,EAAbA;EAAa,CAAE;AAClD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}