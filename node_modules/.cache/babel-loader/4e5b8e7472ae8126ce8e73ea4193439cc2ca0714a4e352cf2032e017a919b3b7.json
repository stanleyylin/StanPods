{"ast":null,"code":"import _classCallCheck from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/dootss/appdevelopment/blast/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nexport var ClientError = /*#__PURE__*/function (_Error) {\n  _inherits(ClientError, _Error);\n  var _super = _createSuper(ClientError);\n  function ClientError(response, request) {\n    var _this;\n    _classCallCheck(this, ClientError);\n    var message = \"\".concat(ClientError.extractMessage(response), \": \").concat(JSON.stringify({\n      response: response,\n      request: request\n    }));\n    _this = _super.call(this, message);\n    Object.setPrototypeOf(_assertThisInitialized(_this), ClientError.prototype);\n    _this.response = response;\n    _this.request = request;\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(_assertThisInitialized(_this), ClientError);\n    }\n    return _this;\n  }\n  _createClass(ClientError, null, [{\n    key: \"extractMessage\",\n    value: function extractMessage(response) {\n      var _response$errors$0$me, _response$errors, _response$errors$;\n      return (_response$errors$0$me = (_response$errors = response.errors) === null || _response$errors === void 0 ? void 0 : (_response$errors$ = _response$errors[0]) === null || _response$errors$ === void 0 ? void 0 : _response$errors$.message) !== null && _response$errors$0$me !== void 0 ? _response$errors$0$me : \"GraphQL Error (Code: \".concat(response.status, \")\");\n    }\n  }]);\n  return ClientError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));","map":{"version":3,"names":["ClientError","_Error","_inherits","_super","_createSuper","response","request","_this","_classCallCheck","message","concat","extractMessage","JSON","stringify","call","Object","setPrototypeOf","_assertThisInitialized","prototype","Error","captureStackTrace","_createClass","key","value","_response$errors$0$me","_response$errors","_response$errors$","errors","status","_wrapNativeSuper"],"sources":["/Users/dootss/appdevelopment/blast/node_modules/graphql-request/src/types.ts"],"sourcesContent":["import type { RemoveIndex } from './helpers.js'\nimport type { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport type { fetch } from 'cross-fetch'\nimport type { GraphQLError } from 'graphql/error/GraphQLError.js'\nimport type { DocumentNode } from 'graphql/language/ast.js'\n\nexport type Fetch = typeof fetch\n\n/**\n * 'None' will throw whenever the response contains errors\n *\n * 'Ignore' will ignore incoming errors and resolve like no errors occurred\n *\n * 'All' will return both the errors and data\n */\nexport type ErrorPolicy = 'none' | 'ignore' | 'all'\n\nexport interface JsonSerializer {\n  stringify: (obj: any) => string\n  parse: (obj: string) => unknown\n}\n\nexport interface AdditionalRequestOptions {\n  jsonSerializer?: JsonSerializer\n  /**\n   * Decide how to handle GraphQLErrors in response\n   */\n  errorPolicy?: ErrorPolicy\n}\n\nexport interface FetchOptions extends RequestInit, AdditionalRequestOptions {}\n\nexport type { GraphQLError }\n\nexport type Variables = Record<string, unknown>\n\nexport type BatchVariables = (Record<string, unknown> | undefined)[]\n\nexport interface GraphQLResponse<T = unknown> {\n  data?: T\n  errors?: GraphQLError[]\n  extensions?: unknown\n  status: number\n  [key: string]: unknown\n}\n\nexport interface GraphQLRequestContext<V extends Variables = Variables> {\n  query: string | string[]\n  variables?: V\n}\n\nexport class ClientError extends Error {\n  response: GraphQLResponse\n  request: GraphQLRequestContext\n\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n      response,\n      request,\n    })}`\n\n    super(message)\n\n    Object.setPrototypeOf(this, ClientError.prototype)\n\n    this.response = response\n    this.request = request\n\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === `function`) {\n      Error.captureStackTrace(this, ClientError)\n    }\n  }\n\n  private static extractMessage(response: GraphQLResponse): string {\n    return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`\n  }\n}\n\nexport type MaybeLazy<T> = T | (() => T)\n\nexport type RequestDocument = string | DocumentNode\n\nexport interface GraphQLClientResponse<Data> {\n  status: number\n  headers: Headers\n  data: Data\n  extensions?: unknown\n  errors?: GraphQLError[]\n}\n\nexport type HTTPMethodInput = 'GET' | 'POST' | 'get' | 'post'\n\nexport interface RequestConfig extends Omit<RequestInit, 'headers' | 'method'>, AdditionalRequestOptions {\n  fetch?: Fetch\n  method?: HTTPMethodInput\n  headers?: MaybeLazy<GraphQLClientRequestHeaders>\n  requestMiddleware?: RequestMiddleware\n  responseMiddleware?: ResponseMiddleware\n  jsonSerializer?: JsonSerializer\n}\n\nexport type BatchRequestDocument<V extends Variables = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport type RawRequestOptions<V extends Variables = Variables> = {\n  query: string\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport type RequestOptions<V extends Variables = Variables, T = unknown> = {\n  document: RequestDocument | TypedDocumentNode<T, V>\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport interface BatchRequestsOptions<V extends Variables = Variables> {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: GraphQLClientRequestHeaders\n  signal?: RequestInit['signal']\n}\n\nexport type RequestExtendedOptions<V extends Variables = Variables, T = unknown> = {\n  url: string\n} & RequestOptions<V, T>\n\nexport type RawRequestExtendedOptions<V extends Variables = Variables> = {\n  url: string\n} & RawRequestOptions<V>\n\nexport interface BatchRequestsExtendedOptions<V extends Variables = Variables>\n  extends BatchRequestsOptions<V> {\n  url: string\n}\n\nexport type ResponseMiddleware = (response: GraphQLClientResponse<unknown> | Error) => void\n\n// prettier-ignore\nexport type RequestMiddleware<V extends Variables = Variables> = (request: RequestExtendedInit<V>) => RequestExtendedInit | Promise<RequestExtendedInit>\n\ntype RequestExtendedInit<V extends Variables = Variables> = RequestInit & {\n  url: string\n  operationName?: string\n  variables?: V\n}\n\nexport type GraphQLClientRequestHeaders = Headers | string[][] | Record<string, string>\n\n// prettier-ignore\nexport type VariablesAndRequestHeadersArgs<V extends Variables> =\n  V extends Record<any, never> // do we have explicitly no variables allowed?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n  : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n    ? [variables?: V, requestHeaders?: GraphQLClientRequestHeaders]\n    : [variables: V, requestHeaders?: GraphQLClientRequestHeaders]\n"],"mappings":";;;;;;AAmDA,WAAaA,WAAY,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EAIvB,SAAAA,YAAYK,QAAyB,EAAEC,OAA8B;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAR,WAAA;IACnE,IAAMS,OAAO,MAAAC,MAAA,CAAMV,WAAW,CAACW,cAAc,CAACN,QAAQ,CAAC,QAAAK,MAAA,CAAKE,IAAI,CAACC,SAAS,CAAC;MACzER,QAAQ,EAARA,QAAQ;MACRC,OAAO,EAAPA;KACD,CAAC,CAAE;IAEJC,KAAA,GAAAJ,MAAA,CAAAW,IAAA,OAAML,OAAO;IAEbM,MAAM,CAACC,cAAc,CAAAC,sBAAA,CAAAV,KAAA,GAAOP,WAAW,CAACkB,SAAS,CAAC;IAElDX,KAAA,CAAKF,QAAQ,GAAGA,QAAQ;IACxBE,KAAA,CAAKD,OAAO,GAAGA,OAAO;IAEtB;IACA,IAAI,OAAOa,KAAK,CAACC,iBAAiB,eAAe,EAAE;MACjDD,KAAK,CAACC,iBAAiB,CAAAH,sBAAA,CAAAV,KAAA,GAAOP,WAAW,CAAC;;IAC3C,OAAAO,KAAA;EACH;EAACc,YAAA,CAAArB,WAAA;IAAAsB,GAAA;IAAAC,KAAA,EAEO,SAAAZ,eAAsBN,QAAyB;MAAA,IAAAmB,qBAAA,EAAAC,gBAAA,EAAAC,iBAAA;MACrD,QAAAF,qBAAA,IAAAC,gBAAA,GAAOpB,QAAQ,CAACsB,MAAM,cAAAF,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,uBAApBA,iBAAA,CAAsBjB,OAAO,cAAAe,qBAAA,cAAAA,qBAAA,2BAAAd,MAAA,CAA4BL,QAAQ,CAACuB,MAAM;IACjF;EAAC;EAAA,OAAA5B,WAAA;AAAA,gBAAA6B,gBAAA,CAzB8BV,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}